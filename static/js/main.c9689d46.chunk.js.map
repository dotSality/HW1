{"version":3,"sources":["p2-homeworks/h2/Task.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h2/Task.tsx","p2-homeworks/h2/Tasks.tsx","p2-homeworks/h2/HW2.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Task","props","className","s","taskContainer","task","name","priority","onClick","deleteTaskCallback","_id","Tasks","mappedTasks","data","map","a","key","mainContainer","buttonContainer","setFilter","defaultTasks","HW2","useState","tasks","setTasks","filter","filteredTasks","filterTasks","deleteTask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,cAAgB,4BAA4B,SAAW,uBAAuB,gBAAkB,gC,mBCA9JD,EAAOC,QAAU,CAAC,IAAM,mB,8KCuBTC,MAdf,SAAcC,GAKV,OACI,yBAAKC,UAAWC,IAAEC,eACd,8BAAOH,EAAMI,KAAKC,KAAlB,KACA,0BAAMJ,UAAWC,IAAEI,UAAWN,EAAMI,KAAKE,SAAzC,KACA,4BAAQC,QARO,WACnBP,EAAMQ,mBAAmBR,EAAMI,KAAKK,OAOhC,OCoBGC,MA5Bf,SAAeV,GACX,IAAMW,EAAcX,EAAMY,KAAKC,KAAI,SAACC,GAAD,OAC/B,kBAAC,EAAD,CACIC,IAAKD,EAAEL,IACPL,KAAMU,EACNN,mBAAoBR,EAAMQ,wBASlC,OACI,yBAAKP,UAAWC,IAAEc,eAEbL,EACD,yBAAKV,UAAWC,IAAEe,iBACd,4BAAQV,QAVL,WAAQP,EAAMkB,UAAU,SAU3B,OACA,4BAAQX,QAVJ,WAAQP,EAAMkB,UAAU,UAU5B,QACA,4BAAQX,QAVF,WAAQP,EAAMkB,UAAU,YAU9B,UACA,4BAAQX,QAVL,WAAQP,EAAMkB,UAAU,SAU3B,UCxBVC,EAAgC,CAClC,CAACV,IAAK,EAAGJ,KAAM,QAASC,SAAU,QAClC,CAACG,IAAK,EAAGJ,KAAM,QAASC,SAAU,OAClC,CAACG,IAAK,EAAGJ,KAAM,SAAUC,SAAU,OACnC,CAACG,IAAK,EAAGJ,KAAM,OAAQC,SAAU,UACjC,CAACG,IAAK,EAAGJ,KAAM,aAAcC,SAAU,WAsC5Bc,MA3Bf,WAAgB,IAAD,EACeC,mBAA0BF,GADzC,mBACJG,EADI,KACGC,EADH,OAEiBF,mBAAqB,OAFtC,mBAEJG,EAFI,KAEIN,EAFJ,KAILO,EAXiB,SAACH,EAAwBE,GAChD,MAAmB,QAAXA,EAAoBF,EAAQA,EAAME,QAAO,SAAApB,GAAI,OAAIA,EAAKE,WAAakB,KAUrDE,CAAYJ,EAAOE,GAGzC,OACI,6BACI,6BADJ,cAKI,kBAAC,EAAD,CACIZ,KAAMa,EACNP,UAAWA,EACXV,mBAXe,SAACC,GAAD,OAA0Bc,EAT/B,SAACD,EAAwBb,GAC/C,OAAOa,EAAME,QAAO,SAAApB,GAAI,OAAIA,EAAKK,MAAQA,KAQqBkB,CAAWL,EAAOb,OAcxE,6BAGA,+BC5BGmB,MAdf,WACI,OACI,yBAAK3B,UAAWC,IAAE0B,KACd,iDAEA,kBAAC,EAAD,QCEQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9689d46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Task_mainContainer__qdHIL\",\"taskContainer\":\"Task_taskContainer__2jQs4\",\"priority\":\"Task_priority__18HPy\",\"buttonContainer\":\"Task_buttonContainer__2pVfR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2jit8\"};","import React from 'react'\r\nimport {TaskType} from './HW2';\r\nimport s from './Task.module.css';\r\n\r\ntype TaskPropsType = {\r\n    // key не нужно типизировать\r\n    task: TaskType\r\n    deleteTaskCallback: (_id: number) => void\r\n}\r\n\r\nfunction Task(props: TaskPropsType) {\r\n    const deleteCallback = () => {\r\n        props.deleteTaskCallback(props.task._id);\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskContainer}>\r\n            <span>{props.task.name} </span>\r\n            <span className={s.priority}>{props.task.priority} </span>\r\n            <button onClick={deleteCallback}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react'\r\nimport Task from './Task'\r\nimport { TaskType, FilterType } from './HW2'\r\nimport s from './Task.module.css';\r\n\r\ntype TasksPropsType = { // need to fix any\r\n    data: Array<TaskType>\r\n    setFilter: (filter: FilterType) => void\r\n    deleteTaskCallback: (_id: number) => void\r\n}\r\n\r\nfunction Tasks(props: TasksPropsType) {\r\n    const mappedTasks = props.data.map((a: TaskType) => (\r\n        <Task // should work\r\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n            task={a}\r\n            deleteTaskCallback={props.deleteTaskCallback}\r\n        />\r\n    ))\r\n\r\n    const setAll = () => { props.setFilter('all') } // need to fix\r\n    const setHigh = () => { props.setFilter('high') }\r\n    const setMiddle = () => { props.setFilter('middle') }\r\n    const setLow = () => { props.setFilter('low') }\r\n\r\n    return (\r\n        <div className={s.mainContainer}>\r\n\r\n            {mappedTasks}\r\n            <div className={s.buttonContainer}>\r\n                <button onClick={setAll}>All</button>\r\n                <button onClick={setHigh}>High</button>\r\n                <button onClick={setMiddle}>Middle</button>\r\n                <button onClick={setLow}>Low</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks\r\n","import React, {useState} from 'react'\r\nimport Tasks from './Tasks'\r\n\r\n// types\r\nexport type TaskPriorityType = 'low' | 'middle' | 'high'\r\nexport type TaskType = {_id: number, name: string, priority: TaskPriorityType}\r\nexport type FilterType = 'all' | TaskPriorityType\r\n\r\n// constants\r\nconst defaultTasks: Array<TaskType> = [\r\n    {_id: 1, name: 'React', priority: 'high'},\r\n    {_id: 2, name: 'CS GO', priority: 'low'},\r\n    {_id: 3, name: 'Guitar', priority: 'low'},\r\n    {_id: 4, name: 'Work', priority: 'middle'},\r\n    {_id: 5, name: 'HTML & CSS', priority: 'middle'},\r\n]\r\n\r\n// pure helper functions\r\nexport const filterTasks = (tasks: Array<TaskType>, filter: FilterType) : Array<TaskType> => { // need to fix any\r\n    return (filter === 'all') ? tasks : tasks.filter(task => task.priority === filter)// need to fix\r\n}\r\nexport const deleteTask = (tasks: Array<TaskType>, _id: TaskType['_id']): Array<TaskType> => { // need to fix any\r\n    return tasks.filter(task => task._id !== _id) // need to fix\r\n}\r\n\r\nfunction HW2() {\r\n    const [tasks, setTasks] = useState<Array<TaskType>>(defaultTasks) // need to fix any\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    const filteredTasks = filterTasks(tasks, filter)\r\n    const deleteTaskCallback = (_id: TaskType['_id']) => setTasks(deleteTask(tasks, _id)) // need to fix any\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 2\r\n\r\n            {/*should work (должно работать)*/}\r\n            <Tasks\r\n                data={filteredTasks}\r\n                setFilter={setFilter}\r\n                deleteTaskCallback={deleteTaskCallback}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeTasks/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW2\r\n\r\n\r\n","import React from 'react'\r\nimport s from './App.module.css'\r\nimport HW1 from '../../../p2-homeworks/h1/HW1'\r\nimport HW2 from '../../../p2-homeworks/h2/HW2';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            <HW2/>\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}